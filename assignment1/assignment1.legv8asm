//Name: Naveen Prabakar
//NET ID: prabakar
//Student ID: 358398098


ADDI X19, XZR, #512// Size of the array is 7
ADDI  X20, XZR, #0 //Base address of the array
LSL X20,X20,#3 //Mutiplies the base address by 8 (8-bytes)

//call the fill method
ADD X0,XZR,X19
ADD X1,XZR,X20
BL fill

// call insertion_sort
ADD X0,XZR,X19
ADD X1,XZR,X20
BL insertion_sort

//Call Binary_search
ADD X0,XZR,X20
ADD X1,XZR,XZR
SUBI X2,X19,#1
ADD X3,XZR,XZR
BL Binary_search
PRNT X0 //Prints the result of Binary_search


ADD X0,XZR,X20
ADD X1,XZR,XZR
SUBI X2,X19,#1
SUBI X3,X19,#1
BL Binary_search
PRNT X0

ADD X0,XZR,X20
ADD X1,XZR,XZR
SUBI X2,X19,#1
LSR X3,X19,#1
BL Binary_search
PRNT X0

ADD X0,XZR,X20
ADD X1,XZR,XZR
SUBI X2,X19,#1
ADD X3,X19,XZR
BL Binary_search
PRNT X0

B end_program //ends the program


Binary_search:
    ADD X9,X1,XZR //start
    ADD X10,X2,XZR //end

    Bin_loop:

       SUBS XZR,X9,X10
       B.GT Bin_exit

       ADD X11,X9,X10
       ADDI X11,X11,#1
       LSR X11,X11,#1
       LSL X13,X11,#3
       ADD X13,X13,X0 //add base address

       LDUR X12,[X13,#0]

       SUBS XZR,X3,X12 //a[m] = value
       B.EQ Bin_equal

       SUBS XZR,X3,X12 //value > a[m]
       B.GT Bin_great

       SUBS XZR,X3,X12 //value < a[m]
       B.LT Bin_less

    Bin_exit:
       ADDI X0,XZR,#-1
       BR LR
    Bin_great:
       ADDI X9,X11,#1
       B Bin_loop

    Bin_less:
       SUBI X10,X11,#1
       B Bin_loop

    Bin_equal:
       ADD X0,X11,XZR
       BR LR

fill:

    ADD X9,XZR,XZR // i = 0
    ADD X10,X1,XZR // X10 = base address

    fill_loop:

       SUBS XZR,X9,X0 // i = n
       B.GE exit

       SUB X11,X0,X9  // X11 = n - i
       SUBI X11, X11, #1 // X11--

       STUR X11, [X10, #0]
       ADDI X9, X9, #1
       ADDI X10, X10, #8 // add 8 bytes to address

       B fill_loop

    exit:

BR LR


 insertion_sort:
    ADD X21,XZR,X0 //length of the array
    ADDI X22,XZR,#1
    ADD X25,X1,XZR //base address

    SUBI SP,SP,#40
    STUR X21,[SP,#0] //Stores the length of the array
    STUR X22,[SP,#8] //Stores the "i" value
    STUR X23,[SP,#16] //Stores the "value"
    STUR X25,[SP,#24] //Stores the base address
    STUR LR,[SP,#32]  //Stores the link register

    insertion_loop:

        SUBS XZR,X22,X21   //i < n
        B.GE insertion_exit

        LSL X9,X22,#3
        ADD X9,X9,X25
        LDUR X23,[X9,#0] //value = a[i]

        ADD X0,X25,XZR
        ADD X1,X22,XZR
        BL is_shift //returns i + 1 in X0

        ADD X1,X23,XZR
        ADD X2,X0,XZR
        ADD X0,XZR,X25
        BL is_insert

        ADDI X22,X22,#1

        B insertion_loop



    insertion_exit:
        LDUR X21,[SP,#0] //pop from the stack
        LDUR X22,[SP,#8]
        LDUR X23,[SP,#16]
        LDUR X25,[SP,#24]
        LDUR LR, [SP,#32]
        ADDI SP,SP,#40
        BR LR


is_insert:
      LSL X9,X2,#3
      ADD X9,X9,X0
      STUR X1,[X9,#0] //a[where] = what
      BR LR


is_shift:
   SUBI X9,X1,#1 //i =  end - 1
   LSL X10,X1,#3 // shift three to the left
   ADD X10,X10,X0
   LDUR X11,[X10,#0] // temp
   ADD X15,XZR,X0 // base address

    shift_loop:

       SUBIS XZR,X9, #-1 //i > -1
       B.LE exit_left

       LSL X13,X9,#3
       ADD X13,X13,X15
       LDUR X12, [X13, #0]

       SUBS XZR, X12, X11 //a[i] > temp
       B.LE exit_left

       STUR X12,[X13, #8] //a[i+1] = a[i]
       SUBI X9,X9,#1


       B shift_loop

   exit_left:

   ADDI X0,X9,#1 // i+1
   BR LR


end_program:

DUMP

